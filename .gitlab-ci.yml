# .gitlab-ci.yml ‚Äî ZenMarket Forecaster Cloud Pipeline
# Purpose: Daily market data ingestion, forecast generation, and email delivery
# Schedule: 08:40 ET weekdays for morning operations, 17:30 ET for evening operations
# Updated: Zen Council Live Forecasting System Integration

stages:
  - qa-guardrails
  - ingest
  - forecast
  - audit
  - notify
  - viz

default:
  image: python:3.11
  interruptible: true
  cache:
    key: "$CI_PROJECT_NAME-pip-cache"
    paths:
      - .cache/pip
    policy: pull-push
  artifacts:
    when: always
    expire_in: 14 days
    paths:
      - audit_exports/**
      - output/**
      - logs/**

variables:
  PIP_CACHE_DIR: ".cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR/src"

# Morning Operations - Schedule at 08:40 ET weekdays
morning_operations:
  stage: ingest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == "MORNING"'
    - if: '$RUN_MORNING_MANUALLY == "1"'
  script:
    - echo "=== ENVIRONMENT SETUP ==="
    - python --version
    - pip --version
    - echo "Installing requirements..."
    - pip install -r requirements.txt
    
    - echo "=== NEWS INGESTION ==="
    - |
      if [ -f "src/news_ingestion.py" ]; then
        python src/news_ingestion.py || echo "Warning: News ingestion failed"
      else
        echo "Warning: news_ingestion.py not found"
      fi
    
    - echo "=== MARKET DATA INGESTION ==="
    - |
      if [ -f "src/data_ingestion.py" ]; then
        python src/data_ingestion.py
      elif [ -f "src/data_ingestion_spy.py" ]; then
        python src/data_ingestion_spy.py
        python src/data_ingestion_vix.py
        python src/data_ingestion_es.py
      else
        echo "Error: No data ingestion script found"
        exit 1
      fi
    
    - echo "=== ZEN COUNCIL LIVE FORECASTING ==="
    - |
      if [ -f "zen_council_live_forecaster.py" ]; then
        echo "Executing Zen Council optimized forecasting system (67.9% baseline)..."
        python zen_council_live_forecaster.py
        echo "Zen Council forecast generation and email delivery completed"
      else
        echo "Warning: zen_council_live_forecaster.py not found - using fallback forecast system"
        if [ -f "src/zen_council.py" ]; then
          python src/zen_council.py
        elif [ -f "src/forecast_engine.py" ]; then
          python src/forecast_engine.py
        elif [ -f "src/Forecast Engine.py" ]; then
          python "src/Forecast Engine.py"
        else
          echo "Error: No forecast script found"
          exit 1
        fi
      fi
    
    - echo "=== LEGACY MORNING EMAIL (FALLBACK) ==="
    - |
      if [ -f "src/send_am_kneeboard.py" ]; then
        echo "Note: Zen Council system handles email delivery - this is fallback only"
        python src/send_am_kneeboard.py || echo "Warning: Legacy email delivery failed"
      else
        echo "Warning: send_am_kneeboard.py not found"
      fi
    
    - echo "=== AUDIT SUMMARY ==="
    - |
      mkdir -p audit_exports/pipeline/$(date +%Y%m%d_%H%M%S)
      echo "Zen Council pipeline execution completed at $(date)" > audit_exports/pipeline/$(date +%Y%m%d_%H%M%S)/PIPELINE_SUMMARY.txt
      echo "Primary forecast system: zen_council_live_forecaster.py" >> audit_exports/pipeline/$(date +%Y%m%d_%H%M%S)/PIPELINE_SUMMARY.txt
      echo "Mathematical baseline: 67.9% accuracy with optimized parameters" >> audit_exports/pipeline/$(date +%Y%m%d_%H%M%S)/PIPELINE_SUMMARY.txt
      ls -la . > audit_exports/pipeline/$(date +%Y%m%d_%H%M%S)/files_found.txt

# Evening Operations - Schedule at 17:30 ET weekdays
evening_operations:
  stage: notify
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULE_TYPE == "EVENING"'
    - if: '$RUN_EVENING_MANUALLY == "1"'
  script:
    - echo "=== EVENING ENVIRONMENT SETUP ==="
    - pip install -r requirements.txt
    
    - echo "=== EVENING DATA UPDATE ==="
    - python src/data_ingestion.py || echo "Evening data update completed"
    
    - echo "=== ZEN COUNCIL EVENING FORECAST ==="
    - |
      if [ -f "zen_council_live_forecaster.py" ]; then
        echo "Executing Zen Council evening forecast (67.9% baseline)..."
        python zen_council_live_forecaster.py
        echo "Zen Council evening forecast and email delivery completed"
      else
        echo "Warning: zen_council_live_forecaster.py not found - skipping evening forecast"
      fi
    
    - echo "=== PERFORMANCE ANALYSIS ==="
    - |
      if [ -f "src/forecast_grading.py" ]; then
        python src/forecast_grading.py || echo "Performance analysis completed"
      fi
    
    - echo "=== LEGACY EVENING EMAIL (FALLBACK) ==="
    - |
      if [ -f "src/send_pm_kneeboard.py" ]; then
        echo "Note: Zen Council system handles email delivery - this is fallback only"
        python src/send_pm_kneeboard.py || echo "Evening email completed"
      fi

# Manual data ingestion job (for testing)
manual_ingestion:
  stage: ingest
  rules:
    - if: '$RUN_INGESTION_ONLY == "1"'
  script:
    - pip install -r requirements.txt
    - python src/data_ingestion.py

# Manual Zen Council forecast execution (for testing)
manual_zen_council_forecast:
  stage: forecast
  rules:
    - if: '$RUN_ZEN_COUNCIL_MANUALLY == "1"'
  script:
    - echo "=== MANUAL ZEN COUNCIL EXECUTION ==="
    - pip install -r requirements.txt
    - |
      if [ -f "zen_council_live_forecaster.py" ]; then
        python zen_council_live_forecaster.py
      else
        echo "Error: zen_council_live_forecaster.py not found"
        exit 1
      fi

# Zen Council backtest execution (for parameter optimization)
zen_council_backtest:
  stage: forecast
  rules:
    - if: '$RUN_ZEN_COUNCIL_BACKTEST == "1"'
  script:
    - echo "=== ZEN COUNCIL BACKTEST EXECUTION ==="
    - pip install -r requirements.txt
    - |
      if [ -f "zen_council_refined_backtest_system.py" ]; then
        python zen_council_refined_backtest_system.py
      else
        echo "Error: zen_council_refined_backtest_system.py not found"
        exit 1
      fi
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# Automated news infrastructure development
news_infrastructure_build:
  stage: ingest
  rules:
    - if: '$BUILD_NEWS_SYSTEM == "1"'
  script:
    - pip install feedparser requests pandas
    - echo "=== NEWS FEED TESTING ==="
    - python src/news_feed_tester.py || echo "Feed testing completed"
    - echo "=== BUILDING NEWS INGESTION SYSTEM ==="
    - python src/build_news_system.py
    - echo "=== TESTING NEWS INTEGRATION ==="
    - python src/test_news_integration.py
    - echo "News infrastructure development completed"

# Automated intraday monitoring development
intraday_monitoring_build:
  stage: ingest  
  rules:
    - if: '$BUILD_INTRADAY_MONITORING == "1"'
  script:
    - echo "üîÑ Stage 4 (forecast) jobs enabled - STAGE_OPEN_4=true"
    - python src/stage4_forecast.py
  artifacts:
    paths:
      - artifacts/forecast/
    expire_in: 1 week

# =========================
# Stage 4B: Format + Send Forecast
# Commit Note: Active job ‚Äì formats & emails forecast
# Commit Note: Requires SENDGRID_API_KEY + Snowflake creds
# Required CI/CD variables:
#   - SENDGRID_API_KEY (masked, protected)
#   - SNOWFLAKE_USER
#   - SNOWFLAKE_PASSWORD
#   - SNOWFLAKE_ACCOUNT
#   - SNOWFLAKE_WAREHOUSE
#   - SNOWFLAKE_DATABASE
#   - SNOWFLAKE_SCHEMA
# =========================
send_forecast_email:
  stage: notify
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_NOTIFY == "true" && $CI_COMMIT_REF_NAME == "main"
      when: on_success
    - when: never
  script:
    - echo "üîÑ Notify stage jobs enabled - STAGE_OPEN_NOTIFY=true"
    - python src/format_and_send_forecast.py
  artifacts:
    paths:
      - artifacts/email/
    expire_in: 1 week

# =========================
# Stage 6: Post-Mortem Audit
# Commit Note: Inactive for now ‚Äì preserved and commented for toggle later
# =========================
# post_mortem_audit:
#   stage: audit
#   script:
#     - python src/post_mortem_audit.py
#   artifacts:
#     paths:
#       - artifacts/postmortem/
#     expire_in: 1 week

# =========================
# Stage 6: Visualization (MVP)  
# Commit Note: Stage 6 jobs require STAGE_OPEN_6=true flag
# Required CI/CD variables (names only, for reference):
#   - STAGE_OPEN_6 (default: false)
#   - SNOWFLAKE_USER, SNOWFLAKE_PASSWORD, SNOWFLAKE_ACCOUNT
#   - SNOWFLAKE_ROLE, SNOWFLAKE_WAREHOUSE (for read-only viz)
# =========================
viz:
  stage: viz
  needs: ["ci_signature"]  
  rules:
    - if: $STAGE_OPEN_6 == "true"
      when: on_success
    - when: never
  before_script:
    - pip install -r requirements-viz.txt
    - apk add --no-cache chromium chromium-chromedriver
  script:
    - |
      if [ "$STAGE_OPEN_6" != "true" ]; then
        echo "‚è∏Ô∏è Stage 6 (visualization) jobs skipped - STAGE_OPEN_6 not enabled"
        echo "VIZ_GATED=true"
        exit 0
      fi
    - echo "üîÑ Stage 6 (visualization) jobs enabled - STAGE_OPEN_6=true"
    - echo "VIZ_GATED=false"
    - echo "üìä Building Streamlit visualization bundle..."
    - mkdir -p artifacts/viz/screenshots
    - cp app.py artifacts/viz/
    - cp requirements-viz.txt artifacts/viz/
    - cp Makefile artifacts/viz/
    - cp README-viz.md artifacts/viz/
    - |
      # Create viz bundle zip
      cd artifacts/viz
      zip -r viz_bundle.zip . -x "screenshots/*"
      cd ../..
    - echo "üì∏ Capturing real page screenshots..."
    - |
      # Set demo mode for screenshots
      export VIZ_DEMO=true
      export VIZ_AUTH_ENABLED=false
      
      # Run screenshot capture
      python screenshot_capture.py || echo "‚ö†Ô∏è Screenshot capture failed, continuing..."
    - echo "‚úÖ Visualization bundle and screenshots created"
    - ls -la artifacts/viz/
  artifacts:
    paths:
      - artifacts/viz/
    expire_in: 1 week

# =========================
# Stage 6: Deployment (Production)
# Commit Note: Deploy job gated by STAGE_OPEN_6 + VIZ_ENV
# Required CI/CD variables (names only):
#   - VIZ_ENV (staging|production)
#   - VIZ_DOMAIN, VIZ_AUTH_* (deployment specific)
# =========================
deploy_viz:
  stage: viz
  script: echo "üöÄ Deployment placeholder - STAGE_OPEN_6 required"
  rules:
    - if: $STAGE_OPEN_6 == "true"

# =========================
# Stage 6: Smoke Tests (Post-Deploy)
# =========================
smoke_tests:
  stage: viz
  image: alpine:latest
  needs: ["deploy_viz"]
  rules:
    - if: $STAGE_OPEN_6 == "true" && $VIZ_ENV != null
      when: on_success
    - when: never
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "üß™ Running post-deploy smoke tests..."
    - DEPLOY_URL="https://${VIZ_DOMAIN}/zenmarket-viz"
    - |
      # Test health endpoint
      echo "üè• Testing health endpoint..."
      START_TIME=$(date +%s%3N)
      HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "${DEPLOY_URL}/_stcore/health" || echo "000")
      END_TIME=$(date +%s%3N)
      HEALTH_TIME=$((END_TIME - START_TIME))
      
      echo "Health check: ${HEALTH_RESPONSE} (${HEALTH_TIME}ms)"
      
      # Test main page (no auth)
      echo "üìä Testing main page (no auth)..."
      START_TIME=$(date +%s%3N)
      MAIN_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "${DEPLOY_URL}/" || echo "000")
      END_TIME=$(date +%s%3N)
      MAIN_TIME=$((END_TIME - START_TIME))
      
      echo "Main page: ${MAIN_RESPONSE} (${MAIN_TIME}ms)"
      
      # Test with auth (if enabled)
      if [ "${VIZ_AUTH_ENABLED}" = "true" ]; then
        echo "üîê Testing authenticated access..."
        AUTH_HEADER=$(echo -n "${VIZ_AUTH_USER}:${VIZ_AUTH_PASS}" | base64)
        START_TIME=$(date +%s%3N)
        AUTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Basic ${AUTH_HEADER}" "${DEPLOY_URL}/" || echo "000")
        END_TIME=$(date +%s%3N)
        AUTH_TIME=$((END_TIME - START_TIME))
        
        echo "Auth access: ${AUTH_RESPONSE} (${AUTH_TIME}ms)"
      fi
      
      # Determine overall result
      if [ "${HEALTH_RESPONSE}" = "200" ] && [ "${MAIN_RESPONSE}" = "200" ]; then
        echo "SMOKE_RESULT=PASS"
        echo "‚úÖ All smoke tests passed"
        exit 0
      else
        echo "SMOKE_RESULT=FAIL"
        echo "‚ùå Smoke tests failed"
        exit 1
      fi

# =========================
# Stage 9: Commercial Features (DRAFT ONLY)
# Commit Note: Stage 9 jobs require STAGE_OPEN_9=true flag
# =========================
# stage9_placeholder:
#   stage: notify
#   script:
#     - |
#       if [ "$STAGE_OPEN_9" != "true" ]; then
#         echo "‚è∏Ô∏è  Stage 9 (commercial) jobs skipped - STAGE_OPEN_9 not enabled"
#         echo "üí° Stage 9 features remain in draft branches until business approval"
#         exit 0
#       fi
#     - echo "üöÄ Stage 9 commercial features enabled"
#   only:
#     - stage9-commercial
#   when: manual
