# =========================================================
# Commit: Add Snowflake credential requirements for notify stage
# - Added inline reminders for SNOWFLAKE_* variables
# - Forecast recipients pulled dynamically from Snowflake table
# - Ensures send_forecast_email job runs clean in CI/CD
# =========================================================

stages:
  - qa-guardrails
  - ingest
  - forecast
  - audit
  - notify

# =========================
# Global Defaults
# =========================
default:
  image: python:3.11-slim
  before_script:
    # Commit Note: Install dependencies from requirements.txt for consistency
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt

# =========================
# Stage 8 QA Guardrails (prevent repeat issues)
# =========================

# CI Lint Preflight (runs first to prevent YAML/schema breaks)
ci_lint_preflight:
  stage: qa-guardrails
  image: python:3.11-slim
  before_script: []
  script:
    - chmod +x ci/ci_lint_preflight.sh
    - ./ci/ci_lint_preflight.sh
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# MR-QA-1: Repo Sentinel (fail fast if not canonical)
repo_sentinel:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["ci_lint_preflight"]
  before_script: []
  script:
    - echo "üõ°Ô∏è Repo Sentinel - Verifying canonical repository"
    - echo "CI_PROJECT_PATH=${CI_PROJECT_PATH}"
    - echo "CI_PROJECT_ID=${CI_PROJECT_ID}"
    - |
      if [ "$CI_PROJECT_PATH" != "zenmarketai/market-forecaster" ]; then
        echo "‚ùå ERROR: Not canonical repo ‚Äî aborting."
        echo "Expected: zenmarketai/market-forecaster"
        echo "Actual: ${CI_PROJECT_PATH}"
        exit 1
      fi
    - |
      if [ -n "$CANONICAL_PROJECT_ID" ] && [ "$CI_PROJECT_ID" != "$CANONICAL_PROJECT_ID" ]; then
        echo "‚ùå ERROR: Project ID mismatch ‚Äî aborting."
        echo "Expected: ${CANONICAL_PROJECT_ID}"
        echo "Actual: ${CI_PROJECT_ID}"
        exit 1
      fi
    - echo "‚úÖ Canonical repository verified"
  allow_failure: false

# MR-QA-2: Mirror & Runner Health
mirror_and_runner_health:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["repo_sentinel"]
  before_script:
    - apk add --no-cache curl jq bc
  script:
    - chmod +x ci/mirror_and_runner_health.sh
    - ./ci/mirror_and_runner_health.sh
    - chmod +x ci/kneeboard_slo_tracker.sh
    - ./ci/kneeboard_slo_tracker.sh
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# MR-QA-4: CI Signature Check
ci_signature:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["mirror_and_runner_health"]
  before_script: []
  script:
    - chmod +x ci/ci_signature_check.sh
    - ./ci/ci_signature_check.sh
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# =========================
# Stage 1: Ingestion (BROKEN)
# Commit Note: ingest_data.py missing from src/. Confirm if renamed or deprecated.
# Commit Note: Job commented out, not deleted, to preserve history.
# =========================
# ingest_data:
#   stage: ingest
#   script:
#     - python src/ingest_data.py
#   artifacts:
#     paths:
#       - artifacts/ingest/
#     expire_in: 1 week

# =========================
# Stage 1.5: Ingestion Audit
# Commit Note: Valid job ‚Äì validates ingestion pipeline
# =========================
ingest_audit_loop:
  stage: ingest
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_1 == "true"
      when: on_success
    - when: never
  script:
    - echo "üîÑ Stage 1 (ingest) jobs enabled - STAGE_OPEN_1=true"
    - python src/ingest_audit_loop.py
  artifacts:
    paths:
      - artifacts/audit/
    expire_in: 1 week

# =========================
# Stage 4: Forecast Build
# Commit Note: Active job ‚Äì builds forecast but does not send
# =========================
ingest_forecast_job:
  stage: forecast
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_4 == "true"
      when: on_success
    - when: never
  script:
    - echo "üîÑ Stage 4 (forecast) jobs enabled - STAGE_OPEN_4=true"
    - python src/stage4_forecast.py
  artifacts:
    paths:
      - artifacts/forecast/
    expire_in: 1 week

# =========================
# Stage 4B: Format + Send Forecast
# Commit Note: Active job ‚Äì formats & emails forecast
# Commit Note: Requires SENDGRID_API_KEY + Snowflake creds
# Required CI/CD variables:
#   - SENDGRID_API_KEY (masked, protected)
#   - SNOWFLAKE_USER
#   - SNOWFLAKE_PASSWORD
#   - SNOWFLAKE_ACCOUNT
#   - SNOWFLAKE_WAREHOUSE
#   - SNOWFLAKE_DATABASE
#   - SNOWFLAKE_SCHEMA
# =========================
send_forecast_email:
  stage: notify
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_NOTIFY == "true" && $CI_COMMIT_REF_NAME == "main"
      when: on_success
    - when: never
  script:
    - echo "üîÑ Notify stage jobs enabled - STAGE_OPEN_NOTIFY=true"
    - python src/format_and_send_forecast.py
  artifacts:
    paths:
      - artifacts/email/
    expire_in: 1 week

# =========================
# Stage 6: Post-Mortem Audit
# Commit Note: Inactive for now ‚Äì preserved and commented for toggle later
# =========================
# post_mortem_audit:
#   stage: audit
#   script:
#     - python src/post_mortem_audit.py
#   artifacts:
#     paths:
#       - artifacts/postmortem/
#     expire_in: 1 week

# =========================
# Stage 9: Commercial Features (DRAFT ONLY)
# Commit Note: Stage 9 jobs require STAGE_OPEN_9=true flag
# =========================
# stage9_placeholder:
#   stage: notify
#   script:
#     - |
#       if [ "$STAGE_OPEN_9" != "true" ]; then
#         echo "‚è∏Ô∏è  Stage 9 (commercial) jobs skipped - STAGE_OPEN_9 not enabled"
#         echo "üí° Stage 9 features remain in draft branches until business approval"
#         exit 0
#       fi
#     - echo "üöÄ Stage 9 commercial features enabled"
#   only:
#     - stage9-commercial
#   when: manual
