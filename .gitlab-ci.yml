# =========================================================
# Commit: Add Snowflake credential requirements for notify stage
# - Added inline reminders for SNOWFLAKE_* variables
# - Forecast recipients pulled dynamically from Snowflake table
# - Ensures send_forecast_email job runs clean in CI/CD
# =========================================================

stages:
  - qa-guardrails
  - ingest
  - forecast
  - audit
  - notify

# =========================
# Global Defaults
# =========================
default:
  image: python:3.11-slim
  before_script:
    # Commit Note: Install dependencies from requirements.txt for consistency
    - python --version
    - pip install --upgrade pip
    - pip install -r requirements.txt

# =========================
# Stage 8 QA Guardrails (prevent repeat issues)
# =========================

# MR-QA-1: Repo Sentinel (fail fast if not canonical)
repo:sentinel:
  stage: qa-guardrails
  image: alpine:latest
  before_script: []
  script:
    - echo "🛡️ Repo Sentinel - Verifying canonical repository"
    - echo "CI_PROJECT_PATH=${CI_PROJECT_PATH}"
    - echo "CI_PROJECT_ID=${CI_PROJECT_ID}"
    - |
      if [ "$CI_PROJECT_PATH" != "zenmarketai/market-forecaster" ]; then
        echo "❌ ERROR: Not canonical repo — aborting."
        echo "Expected: zenmarketai/market-forecaster"
        echo "Actual: ${CI_PROJECT_PATH}"
        exit 1
      fi
    - |
      if [ -n "$CANONICAL_PROJECT_ID" ] && [ "$CI_PROJECT_ID" != "$CANONICAL_PROJECT_ID" ]; then
        echo "❌ ERROR: Project ID mismatch — aborting."
        echo "Expected: ${CANONICAL_PROJECT_ID}"
        echo "Actual: ${CI_PROJECT_ID}"
        exit 1
      fi
    - echo "✅ Canonical repository verified"
  allow_failure: false

# MR-QA-2: Mirror & Runner Health
mirror:and:runner:health:
  stage: qa-guardrails
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "🔍 Checking mirror and runner health"
    - mkdir -p audit_exports/daily/$(date +%Y%m%d_%H%M%S)
    - export AUDIT_DIR="audit_exports/daily/$(date +%Y%m%d_%H%M%S)"
    - |
      cat > ${AUDIT_DIR}/REPO_HEALTH.md << EOF
      # Repository Health Check
      **Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')
      **Repository**: ${CI_PROJECT_PATH}
      **Pipeline**: ${CI_PIPELINE_ID}
      
      ## Health Status
      - **Default Branch**: ${CI_DEFAULT_BRANCH}
      - **Shared Runners**: Active
      - **Pipeline Status**: Running
      - **Last Commit**: ${CI_COMMIT_SHORT_SHA} (${CI_COMMIT_TITLE})
      
      ## Mirror Status
      - **GitHub Mirror**: Sync status requires API check
      - **Runners Active**: Yes
      
      ---
      Generated by ZenMarket AI QA Guardrails
      EOF
    - echo "📊 Repository health check completed"
    - cat ${AUDIT_DIR}/REPO_HEALTH.md
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# MR-QA-4: CI Signature Check
ci:signature:
  stage: qa-guardrails
  image: alpine:latest
  before_script: []
  script:
    - echo "🔐 CI Signature Check"
    - ACTUAL_HASH=$(sha256sum .gitlab-ci.yml | cut -d' ' -f1)
    - echo "Actual .gitlab-ci.yml hash: ${ACTUAL_HASH}"
    - |
      if [ -n "$CI_SIGNATURE" ]; then
        echo "Expected hash: ${CI_SIGNATURE}"
        if [ "$ACTUAL_HASH" != "$CI_SIGNATURE" ]; then
          echo "❌ ERROR: CI signature mismatch — potential drift detected"
          echo "Update CI_SIGNATURE variable if this change is intentional"
          exit 1
        fi
        echo "✅ CI signature verified"
      else
        echo "⚠️  WARNING: CI_SIGNATURE not set - skipping verification"
        echo "Set CI_SIGNATURE=${ACTUAL_HASH} to enable protection"
      fi
  allow_failure: false

# =========================
# Stage 1: Ingestion (BROKEN)
# Commit Note: ingest_data.py missing from src/. Confirm if renamed or deprecated.
# Commit Note: Job commented out, not deleted, to preserve history.
# =========================
# ingest_data:
#   stage: ingest
#   script:
#     - python src/ingest_data.py
#   artifacts:
#     paths:
#       - artifacts/ingest/
#     expire_in: 1 week

# =========================
# Stage 1.5: Ingestion Audit
# Commit Note: Valid job – validates ingestion pipeline
# =========================
ingest_audit_loop:
  stage: ingest
  script:
    - |
      if [ "$STAGE_OPEN_1" != "true" ]; then
        echo "⏸️  Stage 1 (ingest) jobs skipped - STAGE_OPEN_1 not enabled"
        exit 0
      fi
    - python src/ingest_audit_loop.py
  artifacts:
    paths:
      - artifacts/audit/
    expire_in: 1 week

# =========================
# Stage 4: Forecast Build
# Commit Note: Active job – builds forecast but does not send
# =========================
ingest_forecast_job:
  stage: forecast
  script:
    - |
      if [ "$STAGE_OPEN_4" != "true" ]; then
        echo "⏸️  Stage 4 (forecast) jobs skipped - STAGE_OPEN_4 not enabled"
        exit 0
      fi
    - python src/stage4_forecast.py
  artifacts:
    paths:
      - artifacts/forecast/
    expire_in: 1 week

# =========================
# Stage 4B: Format + Send Forecast
# Commit Note: Active job – formats & emails forecast
# Commit Note: Requires SENDGRID_API_KEY + Snowflake creds
# Required CI/CD variables:
#   - SENDGRID_API_KEY (masked, protected)
#   - SNOWFLAKE_USER
#   - SNOWFLAKE_PASSWORD
#   - SNOWFLAKE_ACCOUNT
#   - SNOWFLAKE_WAREHOUSE
#   - SNOWFLAKE_DATABASE
#   - SNOWFLAKE_SCHEMA
# =========================
send_forecast_email:
  stage: notify
  script:
    - |
      if [ "$STAGE_OPEN_NOTIFY" != "true" ]; then
        echo "⏸️  Notify stage jobs skipped - STAGE_OPEN_NOTIFY not enabled"
        exit 0
      fi
    - python src/format_and_send_forecast.py
  only:
    - main
  artifacts:
    paths:
      - artifacts/email/
    expire_in: 1 week

# =========================
# Stage 6: Post-Mortem Audit
# Commit Note: Inactive for now – preserved and commented for toggle later
# =========================
# post_mortem_audit:
#   stage: audit
#   script:
#     - python src/post_mortem_audit.py
#   artifacts:
#     paths:
#       - artifacts/postmortem/
#     expire_in: 1 week

# =========================
# Stage 9: Commercial Features (DRAFT ONLY)
# Commit Note: Stage 9 jobs require STAGE_OPEN_9=true flag
# =========================
# stage9_placeholder:
#   stage: notify
#   script:
#     - |
#       if [ "$STAGE_OPEN_9" != "true" ]; then
#         echo "⏸️  Stage 9 (commercial) jobs skipped - STAGE_OPEN_9 not enabled"
#         echo "💡 Stage 9 features remain in draft branches until business approval"
#         exit 0
#       fi
#     - echo "🚀 Stage 9 commercial features enabled"
#   only:
#     - stage9-commercial
#   when: manual
