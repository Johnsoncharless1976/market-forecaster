# File: .gitlab-ci.yml
# Title: Stage 1 CI Audit — Exec report + fail on violations
# Commit Notes:
# - Add audit stage that runs exec_audit_summary.py and ci_guard_stage1.py
# - Publishes REPORT_EXEC.md and summary.csv as build artifacts
# - Uses masked GitLab CI variables for Snowflake (no secrets in code)
# - Triggers on main and Merge Request pipelines

<<<<<<< HEAD
stages:
  - qa-guardrails
  - ingest
  - forecast
  - audit
  - notify
=======
image: python:3.11
>>>>>>> caa3442 (ci(stage1): add exec audit w/ artifacts; fail pipeline on violations)

variables:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONUNBUFFERED: "1"
  # Set these in GitLab ➜ Settings ➜ CI/CD ➜ Variables (masked+protected):
  # SNOWFLAKE_ACCOUNT
  # SNOWFLAKE_USER
  # SNOWFLAKE_PASSWORD
  # SNOWFLAKE_ROLE
  # SNOWFLAKE_WAREHOUSE
  # SNOWFLAKE_DATABASE
  # SNOWFLAKE_SCHEMA
  # (optional) SNOWFLAKE_STMT_TIMEOUT, SNOWFLAKE_QUERY_TAG, JOB

<<<<<<< HEAD
# =========================
# Stage 8 QA Guardrails (prevent repeat issues)
# =========================

# CI Lint Preflight (runs first to prevent YAML/schema breaks)
ci_lint_preflight:
  stage: qa-guardrails
  image: python:3.11-slim
  before_script: []
  script:
    - chmod +x ci/ci_lint_preflight.sh
    - ./ci/ci_lint_preflight.sh
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# MR-QA-1: Repo Sentinel (fail fast if not canonical)
repo_sentinel:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["ci_lint_preflight"]
  before_script: []
  script:
    - echo "🛡️ Repo Sentinel - Verifying canonical repository"
    - echo "CI_PROJECT_PATH=${CI_PROJECT_PATH}"
    - echo "CI_PROJECT_ID=${CI_PROJECT_ID}"
    - |
      if [ "$CI_PROJECT_PATH" != "zenmarketai/market-forecaster" ]; then
        echo "❌ ERROR: Not canonical repo — aborting."
        echo "Expected: zenmarketai/market-forecaster"
        echo "Actual: ${CI_PROJECT_PATH}"
        exit 1
      fi
    - |
      if [ -n "$CANONICAL_PROJECT_ID" ] && [ "$CI_PROJECT_ID" != "$CANONICAL_PROJECT_ID" ]; then
        echo "❌ ERROR: Project ID mismatch — aborting."
        echo "Expected: ${CANONICAL_PROJECT_ID}"
        echo "Actual: ${CI_PROJECT_ID}"
        exit 1
      fi
    - echo "✅ Canonical repository verified"
  allow_failure: false

# MR-QA-2: Mirror & Runner Health
mirror_and_runner_health:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["repo_sentinel"]
  before_script:
    - apk add --no-cache curl jq bc
  script:
    - echo "🔍 Checking mirror and runner health"
    - export AUDIT_DIR="audit_exports/daily/$(date +%Y%m%d_%H%M%S)"
    - mkdir -p ${AUDIT_DIR}
    - chmod +x ci/kneeboard_slo_tracker.sh
    - ./ci/kneeboard_slo_tracker.sh
    - |
      cat > ${AUDIT_DIR}/REPO_HEALTH.md << EOF
      # Repository Health Check
      **Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')
      **Repository**: ${CI_PROJECT_PATH}
      **Pipeline**: ${CI_PIPELINE_ID}
      
      ## Health Status
      - **Project Path**: ${CI_PROJECT_PATH}
      - **Project ID**: ${CI_PROJECT_ID}
      - **Default Branch**: ${CI_DEFAULT_BRANCH}
      - **Last Green SHA**: ${CI_COMMIT_SHORT_SHA}
      - **Last Green Time**: $(date '+%Y-%m-%d %H:%M:%S UTC')
      - **Shared Runners**: Active
      
      ## Mirror Status
      - **GitHub Mirror**: Sync status requires API check
      - **Runners Active**: Yes
      
      ---
      Generated by ZenMarket AI QA Guardrails
      EOF
    - echo "📊 Repository health check completed"
    - cat ${AUDIT_DIR}/REPO_HEALTH.md
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# MR-QA-4: CI Signature Check
ci_signature:
  stage: qa-guardrails
  image: alpine:latest
  needs: ["mirror_and_runner_health"]
  before_script: []
  script:
    - chmod +x ci/ci_signature_check.sh
    - ./ci/ci_signature_check.sh
  artifacts:
    paths:
      - audit_exports/daily/
    expire_in: 1 week
  allow_failure: false

# =========================
# Stage 1: Ingestion (BROKEN)
# Commit Note: ingest_data.py missing from src/. Confirm if renamed or deprecated.
# Commit Note: Job commented out, not deleted, to preserve history.
# =========================
# ingest_data:
#   stage: ingest
#   script:
#     - python src/ingest_data.py
#   artifacts:
#     paths:
#       - artifacts/ingest/
#     expire_in: 1 week

# =========================
# Stage 1.5: Ingestion Audit
# Commit Note: Valid job – validates ingestion pipeline
# =========================
ingest_audit_loop:
  stage: ingest
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_1 == "true"
      when: on_success
    - when: never
  script:
    - echo "🔄 Stage 1 (ingest) jobs enabled - STAGE_OPEN_1=true"
    - python src/ingest_audit_loop.py
=======
stages: [audit]

cache:
  key: "$CI_JOB_IMAGE"
  paths:
    - .cache/pip

before_script:
  - python --version
  - pip install --upgrade pip
  - pip install -r vscode_snowflake_starter/requirements.txt

stage1:audit:
  stage: audit
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - echo "=== STAGE1:EXEC JOB STARTING ==="
    - mkdir -p audit_exports
    - python vscode_snowflake_starter/src/exec_audit_summary.py
<<<<<<< HEAD
    - python vscode_snowflake_starter/src/ci_guard_stage1.py
>>>>>>> caa3442 (ci(stage1): add exec audit w/ artifacts; fail pipeline on violations)
=======
    - echo "=== STAGE1:EXEC JOB COMPLETE ==="
>>>>>>> 7c41db1 (debug(CI): disable audit job temporarily to test exec job)
  artifacts:
    when: always
    expire_in: 14 days
    paths:
<<<<<<< HEAD
      - artifacts/audit/
    expire_in: 1 week

# =========================
# Stage 4: Forecast Build
# Commit Note: Active job – builds forecast but does not send
# =========================
ingest_forecast_job:
  stage: forecast
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_4 == "true"
      when: on_success
    - when: never
  script:
    - echo "🔄 Stage 4 (forecast) jobs enabled - STAGE_OPEN_4=true"
    - python src/stage4_forecast.py
  artifacts:
    paths:
      - artifacts/forecast/
    expire_in: 1 week

# =========================
# Stage 4B: Format + Send Forecast
# Commit Note: Active job – formats & emails forecast
# Commit Note: Requires SENDGRID_API_KEY + Snowflake creds
# Required CI/CD variables:
#   - SENDGRID_API_KEY (masked, protected)
#   - SNOWFLAKE_USER
#   - SNOWFLAKE_PASSWORD
#   - SNOWFLAKE_ACCOUNT
#   - SNOWFLAKE_WAREHOUSE
#   - SNOWFLAKE_DATABASE
#   - SNOWFLAKE_SCHEMA
# =========================
send_forecast_email:
  stage: notify
  needs: ["ci_signature"]
  rules:
    - if: $STAGE_OPEN_NOTIFY == "true" && $CI_COMMIT_REF_NAME == "main"
      when: on_success
    - when: never
  script:
    - echo "🔄 Notify stage jobs enabled - STAGE_OPEN_NOTIFY=true"
    - python src/format_and_send_forecast.py
  artifacts:
    paths:
      - artifacts/email/
    expire_in: 1 week

# =========================
# Stage 6: Post-Mortem Audit
# Commit Note: Inactive for now – preserved and commented for toggle later
# =========================
# post_mortem_audit:
#   stage: audit
#   script:
#     - python src/post_mortem_audit.py
#   artifacts:
#     paths:
#       - artifacts/postmortem/
#     expire_in: 1 week

# =========================
# Stage 9: Commercial Features (DRAFT ONLY)
# Commit Note: Stage 9 jobs require STAGE_OPEN_9=true flag
# =========================
# stage9_placeholder:
#   stage: notify
#   script:
#     - |
#       if [ "$STAGE_OPEN_9" != "true" ]; then
#         echo "⏸️  Stage 9 (commercial) jobs skipped - STAGE_OPEN_9 not enabled"
#         echo "💡 Stage 9 features remain in draft branches until business approval"
#         exit 0
#       fi
#     - echo "🚀 Stage 9 commercial features enabled"
#   only:
#     - stage9-commercial
#   when: manual
=======
      - audit_exports/stage1_exec_*/REPORT_EXEC.md
      - audit_exports/stage1_exec_*/summary.csv
<<<<<<< HEAD
>>>>>>> caa3442 (ci(stage1): add exec audit w/ artifacts; fail pipeline on violations)
=======

stage1:audit:
  stage: audit
  needs:
    - job: stage1:exec
      artifacts: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $ENABLE_AUDIT == "true"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $ENABLE_AUDIT == "true"'
  script:
    - echo "=== STAGE1:AUDIT JOB STARTING ==="
    - ls -la audit_exports/
    - python vscode_snowflake_starter/src/ci_guard_stage1.py
    - echo "=== STAGE1:AUDIT JOB COMPLETE ==="
  artifacts:
    when: always
    expire_in: 14 days
    reports:
      junit: audit_exports/stage1_exec_*/summary.csv
>>>>>>> 7c41db1 (debug(CI): disable audit job temporarily to test exec job)
