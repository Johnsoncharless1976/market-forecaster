# .gitlab-ci.yml — ZenMarket Forecaster CI/CD (perf/chopguard-v0.2.1)
# Gate: fail when weekday_gaps > 0 (toggle via ENFORCE_GAPS=strict|off)

variables:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PYTHONPATH: "$CI_PROJECT_DIR/vscode_snowflake_starter/src"
  ENFORCE_GAPS: "strict"   # set to "off" to allow gaps without failing

default:
  image: python:3.11
  cache:
    key: "$CI_JOB_IMAGE"
    paths:
      - .cache/pip
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install --upgrade -r vscode_snowflake_starter/requirements.txt snowflake-connector-python
    - echo "PYTHONPATH=$PYTHONPATH"

stages: [exec, reports]

# -------------------
# Stage: exec (audit)
# -------------------
audit_cli:
  stage: exec
  script:
    - echo "=== EXEC STAGE START ==="
    - python -c "import snowflake; print('snowflake import OK')"
    - python vscode_snowflake_starter/src/exec_audit_summary.py
    - AUDIT_DIR="$(ls -dt vscode_snowflake_starter/audit_exports/stage1_exec_* | head -1)"
    - echo "AUDIT_DIR=$AUDIT_DIR" > exec.env
    - echo "EXEC_READY=true" >> exec.env
    # ---- gate: fail if weekday_gaps > 0 when ENFORCE_GAPS=strict ----
    - |
      GAPS=$(awk -F, '$1=="weekday_gaps"{print $2}' "$AUDIT_DIR/summary.csv")
      echo "weekday_gaps=$GAPS (enforce=$ENFORCE_GAPS)"
      if [ "${ENFORCE_GAPS}" = "strict" ] && [ "${GAPS:-0}" -gt 0 ]; then
        echo "❌ Weekday gaps detected ($GAPS). Failing per policy."; exit 1
      else
        echo "✅ Gate passed."
      fi
    - echo "=== EXEC STAGE DONE ==="
  artifacts:
    when: always
    paths:
      - "vscode_snowflake_starter/audit_exports/stage1_exec_*/REPORT_EXEC.md"
      - "vscode_snowflake_starter/audit_exports/stage1_exec_*/summary.csv"
    reports:
      dotenv: exec.env
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "perf/chopguard-v0.2.1"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# ----------------------
# Stage: reports (print)
# ----------------------
publish_exec_report:
  stage: reports
  script:
    - echo "EXEC_READY=${EXEC_READY}"
    - test "${EXEC_READY}" = "true"
    - echo "AUDIT_DIR=${AUDIT_DIR}"
    - test -d "${AUDIT_DIR}"
    - echo "===== REPORT_EXEC.md (head) ====="
    - head -50 "${AUDIT_DIR}/REPORT_EXEC.md"
    - echo "===== summary.csv (tail) ====="
    - tail -20 "${AUDIT_DIR}/summary.csv"
  artifacts:
    when: always
    paths:
      - "${AUDIT_DIR:-vscode_snowflake_starter/audit_exports}/"
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "perf/chopguard-v0.2.1"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# ---------------------------------------------
# Stage: reports (Slack notifications, webhooks)
# ---------------------------------------------
# Requirements:
#   - Set masked CI/CD variables:
#       SLACK_WEBHOOK_MR            -> webhook for #zen-forecaster-mr
#       SLACK_WEBHOOK_INCIDENTS     -> webhook for #zen-forecaster-incidents

slack_mr_update:
  stage: reports
  rules:
    # Post to MR channel for any MR-triggered pipeline (pass/fail)
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - |
      MSG=$(cat <<JSON
      {
        "text": "*MR Update*",
        "blocks": [
          {
            "type": "section",
            "text": { "type": "mrkdwn",
              "text": "*MR:* <$CI_MERGE_REQUEST_PROJECT_URL/-/merge_requests/$CI_MERGE_REQUEST_IID|!$CI_MERGE_REQUEST_IID> • *$CI_MERGE_REQUEST_TITLE*\n*Pipeline:* <$CI_PIPELINE_URL|#$CI_PIPELINE_ID> • *Status:* $CI_PIPELINE_STATUS"
            }
          }
        ]
      }
      JSON
      )
      test -n "$SLACK_WEBHOOK_MR" || { echo "SLACK_WEBHOOK_MR not set"; exit 0; }
      curl -sS -X POST -H 'Content-type: application/json' --data "$MSG" "$SLACK_WEBHOOK_MR" || true

slack_incident_on_fail:
  stage: reports
  when: always
  rules:
    # Fire only on failed pipelines (even if exec job failed)
    - if: '$CI_PIPELINE_STATUS == "failed"'
      when: always
  script:
    - |
      AUD="vscode_snowflake_starter/audit_exports"
      LAST_DIR=$(ls -dt ${AUD}/stage1_exec_* 2>/dev/null | head -1 || true)
      LAST_SUM="${LAST_DIR:+$LAST_DIR/summary.csv}"
      GAPS=$([ -f "$LAST_SUM" ] && awk -F, '$1=="weekday_gaps"{print $2}' "$LAST_SUM" || echo "n/a")
      MSG=$(cat <<JSON
      {
        "text": "🚨 *Pipeline FAILED* for *$CI_PROJECT_PATH* on *$CI_COMMIT_BRANCH*",
        "blocks": [
          { "type": "header", "text": { "type": "plain_text", "text": "🚨 Pipeline Failed" } },
          { "type": "section",
            "fields": [
              { "type": "mrkdwn", "text": "*Pipeline:*\n<$CI_PIPELINE_URL|#$CI_PIPELINE_ID>" },
              { "type": "mrkdwn", "text": "*Commit:*\n<$CI_PROJECT_URL/-/commit/$CI_COMMIT_SHA|${CI_COMMIT_SHORT_SHA:-$CI_COMMIT_SHA}>" },
              { "type": "mrkdwn", "text": "*weekday_gaps:*\n$GAPS" }
            ]
          }
        ]
      }
      JSON
      )
      test -n "$SLACK_WEBHOOK_INCIDENTS" || { echo "SLACK_WEBHOOK_INCIDENTS not set"; exit 0; }
      curl -sS -X POST -H 'Content-type: application/json' --data "$MSG" "$SLACK_WEBHOOK_INCIDENTS" || true
