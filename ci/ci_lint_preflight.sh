#!/bin/sh
set -e

echo "🔍 CI Lint Preflight - Validating .gitlab-ci.yml"

# Create audit directory
AUDIT_DIR="audit_exports/daily/$(date +%Y%m%d_%H%M%S)"
mkdir -p "${AUDIT_DIR}"

CURRENT_DATE="$(date '+%Y-%m-%d %H:%M:%S UTC')"
ERROR_COUNT=0
WARN_COUNT=0
LINT_OUTPUT=""

# Basic YAML syntax check
echo "📋 Checking YAML syntax..."
if command -v python3 >/dev/null 2>&1; then
    # Try to install PyYAML if not present
    if ! python3 -c "import yaml" 2>/dev/null; then
        echo "📦 Installing PyYAML..."
        pip install PyYAML >/dev/null 2>&1 || echo "⚠️  Could not install PyYAML"
    fi
    
    YAML_CHECK=$(python3 -c "
import yaml, sys
try:
    with open('.gitlab-ci.yml', 'r') as f:
        yaml.safe_load(f.read())
    print('✅ YAML syntax valid')
except yaml.YAMLError as e:
    print(f'❌ YAML syntax error: {e}')
    sys.exit(1)
except Exception as e:
    print(f'❌ File read error: {e}')
    sys.exit(1)
" 2>&1)
    YAML_EXIT_CODE=$?
    
    if [ $YAML_EXIT_CODE -ne 0 ]; then
        ERROR_COUNT=$((ERROR_COUNT + 1))
        LINT_OUTPUT="${LINT_OUTPUT}\n❌ YAML Syntax Error:\n${YAML_CHECK}\n"
        echo "$YAML_CHECK"
    else
        LINT_OUTPUT="${LINT_OUTPUT}\n✅ YAML Syntax: Valid\n"
        echo "$YAML_CHECK"
    fi
else
    # Fallback: Basic syntax checks without Python
    echo "⚠️  Python3 not available - using basic validation"
    
    # Check for basic YAML issues
    if grep -q "^[[:space:]]*:" .gitlab-ci.yml; then
        ERROR_COUNT=$((ERROR_COUNT + 1))
        LINT_OUTPUT="${LINT_OUTPUT}\n❌ YAML indentation issue detected\n"
        echo "❌ YAML indentation issue detected"
    elif ! grep -q "^[a-zA-Z]" .gitlab-ci.yml; then
        ERROR_COUNT=$((ERROR_COUNT + 1))
        LINT_OUTPUT="${LINT_OUTPUT}\n❌ No valid YAML content found\n"
        echo "❌ No valid YAML content found"
    else
        LINT_OUTPUT="${LINT_OUTPUT}\n✅ Basic YAML structure: Valid\n"
        echo "✅ Basic YAML structure appears valid"
    fi
fi

# Basic GitLab CI structure checks
echo "📋 Checking GitLab CI structure..."

# Check for required sections
if ! grep -q "^stages:" .gitlab-ci.yml; then
    ERROR_COUNT=$((ERROR_COUNT + 1))
    LINT_OUTPUT="${LINT_OUTPUT}\n❌ Missing 'stages:' definition\n"
    echo "❌ Missing 'stages:' definition"
else
    LINT_OUTPUT="${LINT_OUTPUT}\n✅ Stages: Defined\n"
    echo "✅ Stages definition found"
fi

# Check for job naming issues (colons in job names)
COLON_JOBS=$(grep -n "^[a-zA-Z][a-zA-Z0-9_]*:[a-zA-Z]" .gitlab-ci.yml || true)
if [ -n "$COLON_JOBS" ]; then
    ERROR_COUNT=$((ERROR_COUNT + 1))
    LINT_OUTPUT="${LINT_OUTPUT}\n❌ Jobs with colons in names (schema violation):\n${COLON_JOBS}\n"
    echo "❌ Found jobs with colons in names:"
    echo "$COLON_JOBS"
else
    LINT_OUTPUT="${LINT_OUTPUT}\n✅ Job Names: Valid (no schema violations)\n"
    echo "✅ Job names are schema-compliant"
fi

# Check for script format issues
SCRIPT_ISSUES=$(grep -n "script:" .gitlab-ci.yml | head -5)
if [ -n "$SCRIPT_ISSUES" ]; then
    LINT_OUTPUT="${LINT_OUTPUT}\n📋 Script Definitions Found:\n${SCRIPT_ISSUES}\n"
    echo "📋 Found script definitions (manual review recommended)"
fi

# Check for deprecated syntax patterns
DEPRECATED_ONLY=$(grep -n "only:" .gitlab-ci.yml || true)
if [ -n "$DEPRECATED_ONLY" ]; then
    WARN_COUNT=$((WARN_COUNT + 1))
    LINT_OUTPUT="${LINT_OUTPUT}\n⚠️  Deprecated 'only:' syntax found (use rules: instead):\n${DEPRECATED_ONLY}\n"
    echo "⚠️  Found deprecated 'only:' syntax"
fi

# Generate CI_LINT.md report with required 5 fields
cat > "${AUDIT_DIR}/CI_LINT.md" << EOF
# CI Lint Preflight Report
**Project Path**: ${CI_PROJECT_PATH}
**Project ID**: ${CI_PROJECT_ID}
**Commit SHA**: ${CI_COMMIT_SHORT_SHA}
**Error Count**: ${ERROR_COUNT}
**Warning Count**: ${WARN_COUNT}
**Result**: $([ $ERROR_COUNT -eq 0 ] && echo "PASS" || echo "FAIL")

## Summary
- **Date**: ${CURRENT_DATE}
- **Pipeline**: ${CI_PIPELINE_ID}
- **Status**: $([ $ERROR_COUNT -eq 0 ] && echo "✅ PASS" || echo "❌ FAIL")

## Lint Results
${LINT_OUTPUT}

## Recommendations
$([ $ERROR_COUNT -gt 0 ] && echo "🔧 Fix errors before proceeding with pipeline" || echo "✅ CI configuration is valid")
$([ $WARN_COUNT -gt 0 ] && echo "💡 Consider addressing warnings for best practices" || echo "")

---
Generated by ZenMarket AI CI Lint Preflight
EOF

echo "📄 CI Lint report: ${AUDIT_DIR}/CI_LINT.md"
cat "${AUDIT_DIR}/CI_LINT.md"

# Emit required log lines
echo "LINT_ERRORS=${ERROR_COUNT}"
echo "RESULT=$([ $ERROR_COUNT -eq 0 ] && echo "PASS" || echo "FAIL")"

# Exit with error if any errors found
if [ $ERROR_COUNT -gt 0 ]; then
    echo "❌ CI Lint failed with ${ERROR_COUNT} errors"
    exit 1
else
    echo "✅ CI Lint passed with ${WARN_COUNT} warnings"
fi