#!/bin/bash

# Live Gate Check - PM Approval Verification
# Blocks any live activation without explicit PM approval

set -euo pipefail

echo "🔒 Live Gate Check - PM Approval Verification"
echo "============================================="

# Check environment variable
COUNCIL_LIVE_APPROVED=${COUNCIL_LIVE_APPROVED:-false}
echo "📋 COUNCIL_LIVE_APPROVED: $COUNCIL_LIVE_APPROVED"

# Initialize status
GATE_STATUS="BLOCKED"
BLOCK_REASON=""
APPROVAL_HASH_COMPUTED=""
APPROVAL_HASH_FILE=""

# Check if approval file exists
APPROVAL_FILE="governance/PM_APPROVAL.md"
if [ ! -f "$APPROVAL_FILE" ]; then
    BLOCK_REASON="approval_file_missing"
    echo "❌ Approval file not found: $APPROVAL_FILE"
else
    echo "✓ Approval file exists: $APPROVAL_FILE"
    
    # Extract approval fields from file
    APPROVED_BY=$(grep "^APPROVED_BY=" "$APPROVAL_FILE" | cut -d'=' -f2 | xargs || echo "")
    DATE=$(grep "^DATE=" "$APPROVAL_FILE" | cut -d'=' -f2 | xargs || echo "")
    TARGET_SHA=$(grep "^TARGET_SHA=" "$APPROVAL_FILE" | cut -d'=' -f2 | xargs || echo "")
    APPROVAL_HASH_FILE=$(grep "^APPROVAL_HASH=" "$APPROVAL_FILE" | cut -d'=' -f2 | xargs || echo "")
    
    echo "📝 Extracted fields:"
    echo "   APPROVED_BY: '$APPROVED_BY'"
    echo "   DATE: '$DATE'"
    echo "   TARGET_SHA: '$TARGET_SHA'"
    echo "   APPROVAL_HASH: '$APPROVAL_HASH_FILE'"
    
    # Check if all fields are present
    if [ -z "$APPROVED_BY" ] || [ -z "$DATE" ] || [ -z "$TARGET_SHA" ] || [ -z "$APPROVAL_HASH_FILE" ]; then
        BLOCK_REASON="approval_missing"
        echo "❌ Missing approval fields in $APPROVAL_FILE"
    else
        # Compute expected hash
        APPROVAL_STRING="${APPROVED_BY}|${DATE}|${TARGET_SHA}"
        APPROVAL_HASH_COMPUTED=$(echo -n "$APPROVAL_STRING" | sha256sum | cut -d' ' -f1)
        
        echo "🧮 Hash computation:"
        echo "   Input string: '$APPROVAL_STRING'"
        echo "   Computed hash: $APPROVAL_HASH_COMPUTED"
        echo "   File hash: $APPROVAL_HASH_FILE"
        
        # Verify hash
        if [ "$APPROVAL_HASH_COMPUTED" != "$APPROVAL_HASH_FILE" ]; then
            BLOCK_REASON="hash_mismatch"
            echo "❌ Hash mismatch - approval invalid"
        else
            echo "✓ Hash verification passed"
            
            # Check environment variable
            if [ "$COUNCIL_LIVE_APPROVED" != "true" ]; then
                BLOCK_REASON="var_false"
                echo "❌ COUNCIL_LIVE_APPROVED must be 'true'"
            else
                GATE_STATUS="UNBLOCKED"
                echo "✅ All checks passed - live deployment allowed"
            fi
        fi
    fi
fi

# Generate timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

# Create audit directory
AUDIT_DIR="audit_exports/daily/$TIMESTAMP"
mkdir -p "$AUDIT_DIR"

# Generate LIVE_GATE_PROOF.md
GATE_PROOF_FILE="$AUDIT_DIR/LIVE_GATE_PROOF.md"

cat > "$GATE_PROOF_FILE" << EOF
# Live Gate Proof

**Timestamp**: $(date '+%Y-%m-%d %H:%M:%S UTC')
**Gate Status**: $GATE_STATUS
**Environment**: COUNCIL_LIVE_APPROVED=$COUNCIL_LIVE_APPROVED

## Approval Check Results

### File Verification
- **Approval File**: $APPROVAL_FILE
- **File Exists**: $([ -f "$APPROVAL_FILE" ] && echo "YES" || echo "NO")

### Field Extraction
- **APPROVED_BY**: $APPROVED_BY
- **DATE**: $DATE  
- **TARGET_SHA**: $TARGET_SHA
- **APPROVAL_HASH**: $APPROVAL_HASH_FILE

### Hash Verification
- **Input String**: $APPROVAL_STRING
- **Computed Hash**: $APPROVAL_HASH_COMPUTED
- **File Hash**: $APPROVAL_HASH_FILE
- **Hash Match**: $([ "$APPROVAL_HASH_COMPUTED" = "$APPROVAL_HASH_FILE" ] && echo "YES" || echo "NO")

### Gate Decision
- **Status**: $GATE_STATUS
- **Block Reason**: $BLOCK_REASON
- **Live Deployment**: $([ "$GATE_STATUS" = "UNBLOCKED" ] && echo "ALLOWED" || echo "BLOCKED")

## Environment Requirements

For live deployment, ensure:
1. \`COUNCIL_LIVE_APPROVED=true\` is set
2. Approval file contains valid PM approval fields  
3. APPROVAL_HASH matches computed SHA256 hash

---
**LIVE GATE**: $GATE_STATUS $([ -n "$BLOCK_REASON" ] && echo "($BLOCK_REASON)" || echo "(ready to flip)")
Generated by Live Gate Check v0.1
EOF

echo "📄 Gate proof written to: $GATE_PROOF_FILE"

# Update INDEX.md with gate status
INDEX_FILE="audit_exports/daily/INDEX.md"
if [ -f "$INDEX_FILE" ]; then
    # Update existing index
    INDEX_LINE="Live Gate: $GATE_STATUS $([ -n "$BLOCK_REASON" ] && echo "($BLOCK_REASON)" || echo "(ready to flip)")"
    
    # Replace or add the Live Gate line
    if grep -q "Live Gate:" "$INDEX_FILE"; then
        sed -i "s/Live Gate:.*/$INDEX_LINE/" "$INDEX_FILE"
    else
        # Add after WinGate line
        sed -i "/WinGate:/a\\$INDEX_LINE" "$INDEX_FILE"
    fi
    
    echo "📋 Updated INDEX.md with gate status"
fi

# Print final status
echo ""
echo "🔒 LIVE GATE FINAL STATUS: $GATE_STATUS"
if [ -n "$BLOCK_REASON" ]; then
    echo "🚫 LIVE_BLOCKED=$BLOCK_REASON"
fi

# Exit with appropriate code
if [ "$GATE_STATUS" = "BLOCKED" ]; then
    exit 1
else
    echo "✅ Live deployment gate passed"
    exit 0
fi