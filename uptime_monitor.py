#!/usr/bin/env python3
"""
Uptime monitoring script for ZenMarket AI Visualization
Pings endpoint hourly and generates daily uptime reports
"""

import os
import requests
import time
import json
import gzip
from datetime import datetime, timedelta
from pathlib import Path

def ping_endpoint(url, timeout=10):
    """Ping the visualization endpoint and measure response time"""
    try:
        start_time = time.time()
        response = requests.get(f"{url}/_stcore/health", timeout=timeout)
        end_time = time.time()
        
        response_time_ms = int((end_time - start_time) * 1000)
        
        return {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
            'status_code': response.status_code,
            'response_time_ms': response_time_ms,
            'success': response.status_code == 200
        }
    except Exception as e:
        return {
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
            'status_code': 0,
            'response_time_ms': timeout * 1000,
            'success': False,
            'error': str(e)
        }

def load_daily_data(date_str):
    """Load existing ping data for the day"""
    data_file = f"audit_exports/daily/uptime_data_{date_str}.json"
    
    if os.path.exists(data_file):
        with open(data_file, 'r') as f:
            return json.load(f)
    
    return {'date': date_str, 'pings': []}

def save_daily_data(data):
    """Save ping data for the day"""
    date_str = data['date']
    data_file = f"audit_exports/daily/uptime_data_{date_str}.json"
    
    os.makedirs(os.path.dirname(data_file), exist_ok=True)
    
    with open(data_file, 'w') as f:
        json.dump(data, f, indent=2)

def generate_uptime_report(data):
    """Generate daily uptime report"""
    if not data['pings']:
        return
    
    pings = data['pings']
    successful_pings = [p for p in pings if p['success']]
    response_times = [p['response_time_ms'] for p in successful_pings]
    
    # Calculate metrics
    total_pings = len(pings)
    successful_count = len(successful_pings)
    uptime_percent = (successful_count / total_pings * 100) if total_pings > 0 else 0
    
    if response_times:
        median_ms = sorted(response_times)[len(response_times)//2]
        p95_ms = sorted(response_times)[int(len(response_times)*0.95)] if len(response_times) > 1 else median_ms
    else:
        median_ms = 0
        p95_ms = 0
    
    # Create audit directory
    audit_dir = f"audit_exports/daily/{data['date'].replace('-', '')}_{datetime.now().strftime('%H%M%S')}"
    os.makedirs(audit_dir, exist_ok=True)
    
    # Generate report
    report_path = f"{audit_dir}/VIZ_UPTIME.md"
    
    with open(report_path, 'w') as f:
        f.write("# Visualization Uptime Report\\n")
        f.write(f"**Date**: {data['date']}\\n")
        f.write(f"**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\\n\\n")
        
        f.write("## Daily Summary\\n")
        f.write(f"- **Uptime**: {uptime_percent:.1f}%\\n")
        f.write(f"- **Total Checks**: {total_pings}\\n")
        f.write(f"- **Successful**: {successful_count}\\n")
        f.write(f"- **Failed**: {total_pings - successful_count}\\n")
        f.write(f"- **Median Response**: {median_ms}ms\\n")
        f.write(f"- **P95 Response**: {p95_ms}ms\\n\\n")
        
        f.write("## Hourly Details\\n")
        f.write("| Time | Status | Response (ms) | Notes |\\n")
        f.write("|------|--------|---------------|-------|\\n")
        
        for ping in pings[-24:]:  # Last 24 hours
            status = "‚úÖ UP" if ping['success'] else "‚ùå DOWN"
            notes = ping.get('error', '') if not ping['success'] else ''
            f.write(f"| {ping['timestamp']} | {status} | {ping['response_time_ms']} | {notes} |\\n")
        
        f.write("\\n---\\n")
        f.write("Generated by ZenMarket AI Uptime Monitor\\n")
    
    print(f"üìä Uptime report generated: {report_path}")
    print(f"üìà Uptime: {uptime_percent:.1f}% | Median: {median_ms}ms | P95: {p95_ms}ms")
    
    return report_path, uptime_percent, median_ms, p95_ms

def rotate_old_data():
    """Rotate old uptime data (keep 30 days)"""
    cutoff_date = datetime.now() - timedelta(days=30)
    
    for file_path in Path("audit_exports/daily/").glob("uptime_data_*.json"):
        try:
            date_str = file_path.stem.replace('uptime_data_', '')
            file_date = datetime.strptime(date_str, '%Y-%m-%d')
            
            if file_date < cutoff_date:
                # Compress and remove old file
                with open(file_path, 'rb') as f_in:
                    with gzip.open(f"{file_path}.gz", 'wb') as f_out:
                        f_out.write(f_in.read())
                
                os.remove(file_path)
                print(f"üì¶ Compressed old data: {file_path.name}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Error rotating {file_path}: {e}")

def main():
    """Main uptime monitoring function"""
    viz_url = os.getenv('VIZ_DOMAIN', 'localhost:8501')
    if not viz_url.startswith('http'):
        viz_url = f"https://{viz_url}/zenmarket-viz"
    
    today = datetime.now().strftime('%Y-%m-%d')
    
    # Load existing data
    data = load_daily_data(today)
    
    # Perform ping
    print(f"üè• Pinging {viz_url}...")
    ping_result = ping_endpoint(viz_url)
    
    # Add to daily data
    data['pings'].append(ping_result)
    
    # Save updated data
    save_daily_data(data)
    
    # Generate daily report if we have enough data
    if len(data['pings']) >= 1:
        generate_uptime_report(data)
    
    # Rotate old data
    rotate_old_data()
    
    print(f"‚úÖ Uptime check completed: {ping_result['success']}")

if __name__ == "__main__":
    main()