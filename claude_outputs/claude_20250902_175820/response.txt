Here's the Python script for the Stage-3 Forecast Writer v1 (Baseline):

```python
# File: stage3_forecast_writer_v1.py
# Title: Stage-3 Forecast Writer v1 (Baseline)
# Commit Notes: Implement baseline forecast (persistence) and idempotent MERGE into FORECAST_DAILY

import os
import logging
from datetime import datetime
from sqlalchemy import create_engine, text

# Snowflake connection details
SNOWFLAKE_USER = os.getenv("SNOWFLAKE_USER")
SNOWFLAKE_PASSWORD = os.getenv("SNOWFLAKE_PASSWORD")
SNOWFLAKE_ACCOUNT = os.getenv("SNOWFLAKE_ACCOUNT")
SNOWFLAKE_WAREHOUSE = os.getenv("SNOWFLAKE_WAREHOUSE")
SNOWFLAKE_DATABASE = os.getenv("SNOWFLAKE_DATABASE")
SNOWFLAKE_SCHEMA = os.getenv("SNOWFLAKE_SCHEMA")

# Logging configuration
logging.basicConfig(
    filename="stage3_forecast_writer_v1.log",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

def run_forecast_writer():
    """
    Reads FEATURES_DAILY from Snowflake, computes baseline forecast (persistence),
    and writes the forecast to FORECAST_DAILY via idempotent MERGE.
    """
    logging.info("Starting Stage-3 Forecast Writer v1 (Baseline)")

    # Create Snowflake engine
    engine = create_engine(
        f"snowflake://{SNOWFLAKE_USER}:{SNOWFLAKE_PASSWORD}@{SNOWFLAKE_ACCOUNT}/{SNOWFLAKE_DATABASE}/{SNOWFLAKE_SCHEMA}?warehouse={SNOWFLAKE_WAREHOUSE}"
    )

    # Read FEATURES_DAILY
    logging.info("Reading FEATURES_DAILY from Snowflake")
    features_daily_query = text("SELECT * FROM FEATURES_DAILY")
    features_daily_df = pd.read_sql(features_daily_query, engine)

    # Compute baseline forecast (persistence)
    logging.info("Computing baseline forecast (persistence)")
    features_daily_df["forecast"] = features_daily_df["close"].shift(1)

    # Write forecast to FORECAST_DAILY via idempotent MERGE
    logging.info("Writing forecast to FORECAST_DAILY via idempotent MERGE")
    merge_query = """
        MERGE INTO FORECAST_DAILY fd
        USING (
            SELECT
                symbol,
                forecast_date,
                forecast
            FROM (
                SELECT
                    symbol,
                    forecast_date,
                    forecast,
                    ROW_NUMBER() OVER (PARTITION BY symbol, forecast_date ORDER BY forecast_date DESC) AS rn
                FROM (
                    SELECT
                        symbol,
                        forecast_date,
                        forecast
                    FROM (?)
                )
            ) WHERE rn = 1
        ) fd_source
        ON fd.symbol = fd_source.symbol AND fd.forecast_date = fd_source.forecast_date
        WHEN MATCHED THEN UPDATE SET fd.forecast = fd_source.forecast
        WHEN NOT MATCHED THEN INSERT (symbol, forecast_date, forecast) VALUES (fd_source.symbol, fd_source.forecast_date, fd_source.forecast);
    """
    with engine.connect() as conn:
        conn.execute(text(merge_query), [features_daily_df])

    logging.info("Stage-3 Forecast Writer v1 (Baseline) completed successfully")

if __name__ == "__main__":
    run_forecast_writer()
```

To run this script, you'll need to set the following environment variables:

- `SNOWFLAKE_USER`
- `SNOWFLAKE_PASSWORD`
- `SNOWFLAKE_ACCOUNT`
- `SNOWFLAKE_WAREHOUSE`
- `SNOWFLAKE_DATABASE`
- `SNOWFLAKE_SCHEMA`

You can save the script in the `src/` directory of your ZenMarket AI repository.

The script reads the `FEATURES_DAILY` table from Snowflake, computes the baseline forecast (persistence), and writes the forecast to the `FORECAST_DAILY` table using an idempotent MERGE operation. It also includes logging to track the execution of the script.

To run the script, you can use the following PowerShell script:

```powershell
# File: run_stage3_forecast_writer_v1.ps1
# Title: Run Stage-3 Forecast Writer v1 (Baseline)
# Commit Notes: Run the Stage-3 Forecast Writer v1 (Baseline) script

$env:SNOWFLAKE_USER = "your_snowflake_user"
$env:SNOWFLAKE_PASSWORD = "your_snowflake_password"
$env:SNOWFLAKE_ACCOUNT = "your_snowflake_account"
$env:SNOWFLAKE_WAREHOUSE = "your_snowflake_warehouse"
$env:SNOWFLAKE_DATABASE = "your_snowflake_database"
$env:SNOWFLAKE_SCHEMA = "your_snowflake_schema"

python src/stage3_forecast_writer_v1.py
```

Save this PowerShell script in the root directory of your ZenMarket AI repository, and run it to execute the Stage-3 Forecast Writer v1 (Baseline) script.
