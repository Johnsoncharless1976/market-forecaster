1) File: vscode_snowflake_starter\src\notifiers\am_kneeboard.py

```python
import os
from datetime import datetime, timedelta
from typing import Optional

import pandas as pd
from dotenv import load_dotenv
from notion_client import Client
from snowflake.sqlalchemy import URL
from sqlalchemy import create_engine

load_dotenv()

SNOWFLAKE_ACCOUNT = os.getenv("SNOWFLAKE_ACCOUNT")
SNOWFLAKE_USER = os.getenv("SNOWFLAKE_USER")
SNOWFLAKE_PASSWORD = os.getenv("SNOWFLAKE_PASSWORD")
SNOWFLAKE_PRIVATE_KEY_PATH = os.getenv("SNOWFLAKE_PRIVATE_KEY_PATH")
SNOWFLAKE_PASSPHRASE = os.getenv("SNOWFLAKE_PASSPHRASE")
SNOWFLAKE_WAREHOUSE = os.getenv("SNOWFLAKE_WAREHOUSE")
SNOWFLAKE_DATABASE = os.getenv("SNOWFLAKE_DATABASE")
SNOWFLAKE_SCHEMA = os.getenv("SNOWFLAKE_SCHEMA")
SNOWFLAKE_ROLE = os.getenv("SNOWFLAKE_ROLE")

SLACK_WEBHOOK_URL1 = os.getenv("SLACK_WEBHOOK_URL1")
SLACK_WEBHOOK_URL2 = os.getenv("SLACK_WEBHOOK_URL2")
SLACK_WEBHOOK_URL3 = os.getenv("SLACK_WEBHOOK_URL3")

NOTION_TOKEN = os.getenv("NOTION_TOKEN")
NOTION_DAILY_DB_ID = os.getenv("NOTION_DAILY_DB_ID")

BAND_PCT = float(os.getenv("BAND_PCT", "0.02"))
TOP_N = int(os.getenv("TOP_N", "10"))

def get_snowflake_engine():
    if SNOWFLAKE_PASSWORD:
        return create_engine(URL(
            account=SNOWFLAKE_ACCOUNT,
            user=SNOWFLAKE_USER,
            password=SNOWFLAKE_PASSWORD,
            warehouse=SNOWFLAKE_WAREHOUSE,
            database=SNOWFLAKE_DATABASE,
            schema=SNOWFLAKE_SCHEMA,
            role=SNOWFLAKE_ROLE
        ))
    else:
        return create_engine(URL(
            account=SNOWFLAKE_ACCOUNT,
            user=SNOWFLAKE_USER,
            private_key=SNOWFLAKE_PRIVATE_KEY_PATH,
            private_key_passphrase=SNOWFLAKE_PASSPHRASE,
            warehouse=SNOWFLAKE_WAREHOUSE,
            database=SNOWFLAKE_DATABASE,
            schema=SNOWFLAKE_SCHEMA,
            role=SNOWFLAKE_ROLE
        ))

def get_latest_trading_day() -> datetime:
    engine = get_snowflake_engine()
    with engine.connect() as conn:
        result = conn.execute("SELECT MAX(date) AS latest_date FROM FORECAST_DAILY")
        latest_date = result.fetchone()[0]
    return latest_date

def get_am_kneeboard_data(trading_day: datetime) -> pd.DataFrame:
    engine = get_snowflake_engine()
    with engine.connect() as conn:
        query = f"""
            SELECT
                f.symbol,
                f.date,
                f.forecast,
                a.latest_close,
                CASE
                    WHEN o.atm_straddle IS NOT NULL THEN o.atm_straddle
                    ELSE f.forecast * {BAND_PCT}
                END AS band,
                f.forecast - CASE
                    WHEN o.atm_straddle IS NOT NULL THEN o.atm_straddle
                    ELSE f.forecast * {BAND_PCT}
                END AS band_lower,
                f.forecast + CASE
                    WHEN o.atm_straddle IS NOT NULL THEN o.atm_straddle
                    ELSE f.forecast * {BAND_PCT}
                END AS band_upper
            FROM FORECAST_DAILY f
            LEFT JOIN ACTUALS_DAILY a ON f.symbol = a.symbol AND f.date = a.date
            LEFT JOIN OPTIONS_SUMMARY o ON f.symbol = o.symbol AND f.date = o.date
            WHERE f.date = '{trading_day.date()}'
            ORDER BY f.symbol
        """
        df = pd.read_sql(query, conn)
    return df

def post_to_slack(trading_day: datetime, df: pd.DataFrame) -> bool:
    if not any([SLACK_WEBHOOK_URL1, SLACK_WEBHOOK_URL2, SLACK_WEBHOOK_URL3]):
        return False

    import requests

    header = f"AM Kneeboard {trading_day.strftime('%Y-%m-%d')}"
    table = df.head(TOP_N).to_string(index=False)
    message = f"```\n{table}\n```"

    for webhook_url in [SLACK_WEBHOOK_URL1, SLACK_WEBHOOK_URL2, SLACK_WEBHOOK_URL3]:
        if webhook_url:
            payload = {
                "text": f"{header}\n{message}"
            }
            response = requests.post(webhook_url, json=payload)
            response.raise_for_status()

    return True

def post_to_notion(trading_day: datetime, df: pd.DataFrame) -> bool:
    if not NOTION_TOKEN or not NOTION_DAILY_DB_ID:
        return False

    from notion_client import Client

    client = Client(auth=NOTION_TOKEN)

    page_title = f"AM Kneeboard {trading_day.strftime('%Y-%m-%d')}"
    page = client.pages.create(
        parent={"database_id": NOTION_DAILY_DB_ID},
        properties={
            "Date": {"date": {"start": trading_day.strftime("%Y-%m-%d")}},
            "Items": {"number": len(df)},
            "Note": {"rich_text": [{"text": {"content": df.to_string(index=False)}}]},
        },
        children=[
            {
                "object": "paragraph",
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"This is the AM Kneeboard for {trading_day.strftime('%Y-%m-%d')}."
                        },
                    }
                ],
            }
        ],
    )
    return True

def main():
    trading_day = get_latest_trading_day()
    df = get_am_kneeboard_data(trading_day)

    posted_to_slack = post_to_slack(trading_day, df)
    posted_to_notion = post_to_notion(trading_day, df)

    print(f"KNEEBOARD: posted_to_slack={posted_to_slack} posted_to_notion={posted_to_notion} rows={len(df)}")

if __name__ == "__main__":
    main()
```

2) File: scripts\run_am_kneeboard.ps1

```powershell
$ErrorActionPreference = "Stop"
