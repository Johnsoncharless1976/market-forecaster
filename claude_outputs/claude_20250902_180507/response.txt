Here is the code for the forecast_audit.py and run_forecast_audit.ps1 files:

```python
# vscode_snowflake_starter\src\forecast\forecast_audit.py
import os
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine
import pandas as pd

load_dotenv()

# Load Snowflake credentials from .env
snowflake_user = os.getenv("SNOWFLAKE_USER")
snowflake_password = os.getenv("SNOWFLAKE_PASSWORD")
snowflake_account = os.getenv("SNOWFLAKE_ACCOUNT")
snowflake_warehouse = os.getenv("SNOWFLAKE_WAREHOUSE")
snowflake_database = os.getenv("SNOWFLAKE_DATABASE")
snowflake_schema = os.getenv("SNOWFLAKE_SCHEMA")

# Create Snowflake engine
engine = create_engine(
    f"snowflake://{snowflake_user}:{snowflake_password}@{snowflake_account}/{snowflake_database}/{snowflake_schema}?warehouse={snowflake_warehouse}"
)

# Load data from Snowflake
query = """
SELECT f.symbol, f.date, f.forecast, a.close
FROM FORECAST_DAILY f
JOIN ACTUALS_DAILY a ON f.symbol = a.symbol AND f.date = a.date
"""
df = pd.read_sql_query(query, engine)

# Calculate metrics
mae = df['forecast'].sub(df['close']).abs().mean()
hit_band = float(os.getenv("HIT_BAND_BPS", "100")) / 10000
hit_rate = (df['forecast'].sub(df['close']).abs() <= df['close'] * hit_band).mean()
row_count = len(df)

# Emit CSV
output_dir = os.path.join("audit_exports", f"forecast_audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
os.makedirs(output_dir, exist_ok=True)
metrics_df = pd.DataFrame({
    "metric": ["mae", "hit_rate", "rows"],
    "value": [mae, hit_rate, row_count]
})
metrics_df.to_csv(os.path.join(output_dir, "forecast_audit_summary.csv"), index=False)

# Determine status
if hit_rate >= 0.80 and mae <= 0.01:
    status = "Green"
    reason = "Forecast accuracy is within acceptable limits"
elif hit_rate >= 0.70 and mae <= 0.02:
    status = "Yellow"
    reason = "Forecast accuracy is within warning limits"
else:
    status = "Red"
    reason = "Forecast accuracy is outside acceptable limits"

print(f"STATUS: {status} - {reason}")

if status == "Red":
    exit(1)
```

```powershell
# scripts\run_forecast_audit.ps1
if (!(Test-Path -Path .venv)) {
    python -m venv .venv
    .\.venv\Scripts\activate
    pip install python-dotenv sqlalchemy snowflake-connector-python snowflake-sqlalchemy pandas
} else {
    .\.venv\Scripts\activate
}

python .\src\forecast\forecast_audit.py

if ($LASTEXITCODE -ne 0) {
    Write-Host "Forecast audit failed. See status message for details."
    exit $LASTEXITCODE
} else {
    Write-Host "Forecast audit completed successfully."
}
```

The forecast_audit.py script performs the following tasks:

1. Loads Snowflake credentials from the .env file.
2. Creates a Snowflake engine using the SQLAlchemy library.
3. Loads the data from the FORECAST_DAILY and ACTUALS_DAILY tables using a SQL query.
4. Calculates the Mean Absolute Error (MAE) and Hit Rate metrics.
5. Writes the metrics to a CSV file in the `audit_exports` directory.
6. Determines the status (Green, Yellow, or Red) based on the calculated metrics and predefined thresholds.
7. Prints the status message and exits with a non-zero status code if the status is Red.

The run_forecast_audit.ps1 script is a PowerShell script that:

1. Checks if the `.venv` virtual environment exists, and if not, creates it and installs the required dependencies.
2. Activates the virtual environment.
3. Runs the forecast_audit.py script.
4. Checks the exit code of the script and prints a success or failure message accordingly.

To run the forecast audit, execute the run_forecast_audit.ps1 script in the project directory.
