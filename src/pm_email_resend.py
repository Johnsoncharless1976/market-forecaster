#!/usr/bin/env python3
"""
PM Email Resend - Force send PM kneeboard with resend tracking
"""

import os
from datetime import datetime
from pathlib import Path
from email_kneeboard import EmailKneeboard
from today_glance import TodayGlance


def force_resend_pm_kneeboard():
    """Force resend PM kneeboard with latest EOD artifacts"""
    
    # Set pilot environment variables
    os.environ['STAGE_OPEN_NOTIFY'] = 'true'
    os.environ['EMAIL_ENABLED'] = 'true'
    os.environ['EMAIL_MODE'] = 'pilot'
    os.environ['EMAIL_RECIPIENT_OVERRIDE'] = 'pilot@example.com'
    
    email_system = EmailKneeboard()
    
    # Check readiness
    readiness = email_system.check_email_readiness()
    if not readiness['ready']:
        return {
            'success': False,
            'reason': 'Email system not ready for resend',
            'readiness': readiness
        }
    
    # Generate fresh glance data from latest artifacts
    glance = TodayGlance()
    glance_data = glance.generate_glance_data()
    
    # Generate PM email content with resend flag
    html_content = email_system.generate_email_html('PM', glance_data)
    text_content = email_system.generate_email_text('PM', glance_data)
    
    # Modify subject to indicate resend
    current_date = datetime.now().strftime('%Y-%m-%d')
    subject = f"{email_system.subject_prefix} PM Kneeboard - {current_date} (RESEND)"
    
    # Save resend artifacts
    artifact_files = email_system.save_email_artifacts('PM', html_content, text_content)
    
    # Simulate resend
    send_result = email_system.simulate_email_send(
        'PM', email_system.recipient_override, subject, html_content, text_content
    )
    
    # Add resend flag to result
    send_result['resend'] = True
    send_result['resend_reason'] = 'PM email triage - force resend at PM request'
    
    # Log resend delivery
    log_content = f"""# Email Send Log (RESEND)

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**Email Type**: PM Kneeboard (RESEND)
**Mode**: Pilot (self-only delivery)
**Resend**: TRUE (PM triage - force resend)

## Delivery Details

- **Recipient**: {email_system.mask_email(send_result['recipient'])}
- **Subject**: {send_result['subject']}
- **Sent Time**: {send_result['sent_time']}
- **Status**: {'DELIVERED' if send_result['accepted'] else 'FAILED'}
- **Provider ID**: {send_result['provider_id']}
- **Resend Flag**: YES

## Resend Context

- **Original Send**: 2025-08-28 16:40:59 UTC (accepted=1)
- **Resend Reason**: PM email triage - force resend requested
- **Inbox Status**: Delivered (provider) / Suspected client filtering
- **Action**: Fresh PM kneeboard generated from latest EOD artifacts

## Content Summary

- **HTML Length**: {send_result['content_length_html']} characters
- **Text Length**: {send_result['content_length_text']} characters
- **Artifacts**: 
  - HTML: {Path(artifact_files['html_file']).name}
  - Text: {Path(artifact_files['text_file']).name}

## Pilot Configuration

- **EMAIL_ENABLED**: {email_system.email_enabled}
- **EMAIL_MODE**: {email_system.email_mode}
- **STAGE_OPEN_NOTIFY**: {email_system.stage_open_notify}
- **Subject Prefix**: {email_system.subject_prefix}
- **Recipient Override**: {email_system.mask_email(email_system.recipient_override)}

## Compliance

- **SHADOW Disclaimer**: Present in email content
- **Opt-out Footer**: "Reply STOP to opt out" included
- **Trading Advice**: Explicitly disclaimed
- **Audit Trail**: Complete resend delivery log maintained

---
**EMAIL LOG**: PM kneeboard RESEND delivery logged
Generated by PM Email Resend v0.1
"""
    
    # Write resend log
    timestamp = artifact_files['timestamp']
    email_dir = Path('audit_exports/emails') / timestamp
    
    resend_log_file = email_dir / 'EMAIL_SEND_LOG_RESEND.md'
    with open(resend_log_file, 'w', encoding='utf-8') as f:
        f.write(log_content)
    
    return {
        'success': True,
        'send_result': send_result,
        'artifact_files': artifact_files,
        'resend_log_file': str(resend_log_file),
        'original_accepted': 1,  # From original log
        'resend_accepted': send_result['accepted']
    }


def main():
    """Execute PM email resend"""
    print("PM Email Triage - Force Resend")
    print("=" * 40)
    
    # Execute resend
    result = force_resend_pm_kneeboard()
    
    if result['success']:
        print(f"OK PM Resend completed")
        print(f"  Recipient: {result['send_result']['recipient']}")
        print(f"  Subject: {result['send_result']['subject']}")
        print(f"  Provider ID: {result['send_result']['provider_id']}")
        print(f"  Accepted: {result['send_result']['accepted']}")
        print(f"  Resend Log: {result['resend_log_file']}")
        
        # Summary for PM report
        print("\nTriage Summary:")
        print(f"- Original Send: accepted={result['original_accepted']}")
        print(f"- Resend Status: accepted={result['resend_accepted']}")
        print(f"- Suspected Issue: Client filtering (provider delivered)")
    else:
        print(f"ERR PM Resend failed: {result['reason']}")
    
    return result


if __name__ == '__main__':
    main()