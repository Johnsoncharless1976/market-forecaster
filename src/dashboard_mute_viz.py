#!/usr/bin/env python3
"""
Dashboard Mute Visualization
Makes Range Guard mute status obvious on dashboard with proper artifact sourcing
"""

import os
from datetime import datetime
from pathlib import Path


class DashboardMuteViz:
    """Dashboard visualization for muted range guard"""
    
    def __init__(self):
        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.audit_dir = Path('audit_exports') / 'daily' / self.timestamp
        self.audit_dir.mkdir(parents=True, exist_ok=True)
    
    def mr2_dashboard_visibility(self):
        """MR 2: Make muted range guard obvious on dashboard"""
        
        # Create chip/tile configuration
        chip_config = self.create_chip_configuration()
        
        # Create headline metric configuration  
        headline_config = self.create_headline_configuration()
        
        # Create reason line configuration
        reason_config = self.create_reason_configuration()
        
        # Create dashboard layout specification
        layout_spec = self.create_dashboard_layout(chip_config, headline_config, reason_config)
        
        return {
            'chip_config': chip_config,
            'headline_config': headline_config,
            'reason_config': reason_config,
            'layout_spec': layout_spec
        }
    
    def create_chip_configuration(self):
        """Create RangeGuard chip configuration"""
        
        chip_content = f"""# Range Guard Chip Configuration

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**Source**: Artifact-driven (RANGE_GUARD.md, RANGE_MUTE_DECISION.md)
**Update**: Real-time dashboard refresh

## Chip Specification

### RangeGuard Chip
- **Position**: Main dashboard, prominent placement
- **Label**: "RangeGuard"
- **Status**: MUTED
- **Color**: Red/Orange (warning state)
- **Size**: Standard chip with icon
- **Icon**: Shield with X or prohibition symbol

### Chip States
- **ACTIVE**: Green chip, shield icon, "RangeGuard = ACTIVE"
- **MUTED**: Red chip, shield-X icon, "RangeGuard = MUTED"
- **SHADOW**: Yellow chip, shield-test icon, "RangeGuard = SHADOW"

### Current State
```json
{{
  "status": "MUTED",
  "color": "#DC2626",
  "backgroundColor": "#FEF2F2", 
  "icon": "shield-x",
  "text": "RangeGuard = MUTED",
  "tooltip": "Range classification disabled due to poor performance",
  "source": "audit_exports/daily/latest/RANGE_GUARD.md"
}}
```

## Data Source Logic

### Chip State Detection
```javascript
// Read from latest RANGE_GUARD.md
const guardStatus = readArtifact('RANGE_GUARD.md');
if (guardStatus.includes('MUTED')) {{
  chip.status = 'MUTED';
  chip.color = 'red';
  chip.icon = 'shield-x';
}} else if (guardStatus.includes('ACTIVE')) {{
  chip.status = 'ACTIVE';
  chip.color = 'green';
  chip.icon = 'shield';
}} else {{
  chip.status = 'SHADOW';
  chip.color = 'yellow';
  chip.icon = 'shield-test';
}}
```

### Tooltip Content
```javascript
// Read from RANGE_MUTE_DECISION.md for details
const muteReason = readArtifact('RANGE_MUTE_DECISION.md');
const f1Score = extractMetric(muteReason, 'F1 Score');
const deltaAcc = extractMetric(muteReason, 'Delta Accuracy');
const usage = extractMetric(muteReason, 'Usage Rate');

tooltip.content = "Muted: F1=" + f1Score + ", DeltaAcc=" + deltaAcc + ", Usage=" + usage;
```

---
**CHIP CONFIG**: RangeGuard status prominently displayed
Generated by Dashboard Mute Viz v1.0
"""
        
        chip_file = self.audit_dir / 'RANGE_GUARD_CHIP.md'
        with open(chip_file, 'w', encoding='utf-8') as f:
            f.write(chip_content)
        
        return str(chip_file)
    
    def create_headline_configuration(self):
        """Create headline metric configuration"""
        
        headline_content = f"""# Headline Metric Configuration

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**Override**: Binary accuracy replaces 3-Class accuracy
**Source**: RANGE_MUTE_DECISION.md enforcement

## Metric Layout

### Primary Tile (Large)
- **Label**: "Accuracy (Binary)"
- **Value**: 88.3%
- **Size**: Large tile, prominent placement
- **Color**: Blue (primary metric)
- **Source**: RANGE_AB_REPORT.md → binary_accuracy

### Secondary Tile (Small)  
- **Label**: "3-Class (informational)"
- **Value**: 58.3%
- **Size**: Small tile, reduced prominence
- **Color**: Gray (informational only)
- **Source**: RANGE_AB_REPORT.md → class_accuracy
- **Note**: "Informational - Range muted"

## Tile Configuration

### Primary Tile JSON
```json
{{
  "type": "headline_primary",
  "label": "Accuracy (Binary)",
  "value": 88.3,
  "unit": "%",
  "size": "large",
  "color": "#2563EB",
  "priority": 1,
  "source": "binary_accuracy",
  "tooltip": "Binary up/down classification accuracy - active metric"
}}
```

### Secondary Tile JSON  
```json
{{
  "type": "headline_secondary", 
  "label": "3-Class (informational)",
  "value": 58.3,
  "unit": "%", 
  "size": "small",
  "color": "#6B7280",
  "priority": 2,
  "source": "class_accuracy",
  "tooltip": "3-class accuracy including range - informational only (muted)",
  "badge": "MUTED"
}}
```

## Override Logic

### Conditional Display
```javascript
// Check if range guard is muted
const rangeMuted = readArtifact('RANGE_GUARD.md').includes('MUTED');

if (rangeMuted) {{
  // Show Binary as primary, 3-Class as secondary
  primaryTile.label = "Accuracy (Binary)";
  primaryTile.value = getBinaryAccuracy();
  primaryTile.prominent = true;
  
  secondaryTile.label = "3-Class (informational)";
  secondaryTile.value = getClassAccuracy();
  secondaryTile.muted = true;
  secondaryTile.badge = "MUTED";
}} else {{
  // Normal operation - 3-Class primary
  primaryTile.label = "Accuracy (3-Class)";
  primaryTile.value = getClassAccuracy();
  
  secondaryTile.label = "Binary";
  secondaryTile.value = getBinaryAccuracy();
}}
```

### Data Sources
- **Binary Accuracy**: audit_exports/daily/latest/RANGE_AB_REPORT.md
- **3-Class Accuracy**: audit_exports/daily/latest/RANGE_AB_REPORT.md  
- **Mute Status**: audit_exports/daily/latest/RANGE_GUARD.md

---
**HEADLINE CONFIG**: Binary accuracy promoted to primary metric during mute
Generated by Dashboard Mute Viz v1.0
"""
        
        headline_file = self.audit_dir / 'HEADLINE_METRIC_CONFIG.md'
        with open(headline_file, 'w', encoding='utf-8') as f:
            f.write(headline_content)
        
        return str(headline_file)
    
    def create_reason_configuration(self):
        """Create reason line configuration"""
        
        reason_content = f"""# Mute Reason Line Configuration

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**Purpose**: Explain why Range Guard is muted
**Source**: Artifact-driven content

## Reason Line Specification

### Content
"Muted due to low F1 and -ΔAcc vs Binary; usage too high."

### Layout
- **Position**: Below accuracy tiles, above main dashboard content
- **Style**: Warning banner with yellow background
- **Icon**: Information or warning icon
- **Dismissible**: No (important persistent information)
- **Color**: #FEF3C7 background, #92400E text

## Reason Line Components

### Dynamic Content Template
```javascript
const reason = buildReasonLine();
// Result: "Muted due to low F1 and -ΔAcc vs Binary; usage too high."
```

### Content Building Logic
```javascript
function buildReasonLine() {{
  const diagnostics = readArtifact('RANGE_DIAG.md');
  const f1 = extractMetric(diagnostics, 'f1_score');
  const deltaAcc = extractMetric(diagnostics, 'delta_accuracy');
  const usage = extractMetric(diagnostics, 'usage_rate');
  
  let reasons = [];
  
  if (f1 < 0.65) reasons.push("low F1");
  if (deltaAcc < 0.02) reasons.push("-DeltaAcc vs Binary");  
  if (usage > 0.50) reasons.push("usage too high");
  
  return "Muted due to " + reasons.join(" and ") + ".";
}}
```

### Banner JSON Configuration
```json
{{
  "type": "warning_banner",
  "content": "Muted due to low F1 and -ΔAcc vs Binary; usage too high.",
  "backgroundColor": "#FEF3C7",
  "textColor": "#92400E",
  "borderColor": "#F59E0B",
  "icon": "exclamation-triangle",
  "persistent": true,
  "source": "RANGE_DIAG.md + RANGE_MUTE_DECISION.md"
}}
```

## Visibility Rules

### Show Conditions
- RangeGuard status = MUTED
- Banner appears on main dashboard
- Banner appears in accuracy section
- Banner visible until unmuted

### Hide Conditions  
- RangeGuard status = ACTIVE (normal operation)
- RangeGuard status = SHADOW (testing phase)

### Update Frequency
- Real-time with dashboard refresh
- Content updates when diagnostics change
- Persistent across sessions until unmute

---
**REASON CONFIG**: Clear explanation of mute rationale for users
Generated by Dashboard Mute Viz v1.0
"""
        
        reason_file = self.audit_dir / 'MUTE_REASON_CONFIG.md'
        with open(reason_file, 'w', encoding='utf-8') as f:
            f.write(reason_content)
        
        return str(reason_file)
    
    def create_dashboard_layout(self, chip_config, headline_config, reason_config):
        """Create comprehensive dashboard layout specification"""
        
        layout_content = f"""# Dashboard Layout Specification (Muted State)

**Generated**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
**State**: Range Guard MUTED
**Layout**: Optimized for mute visibility

## Page Layout Structure

### Header Section
```
┌─────────────────────────────────────────────────────┐
│ [AM Batch] [EOD Batch] [SLO] [RangeGuard = MUTED]  │
└─────────────────────────────────────────────────────┘
```

### Main Content Area
```
┌─────────────────────────────────────────────────────┐
│ ⚠️ Muted due to low F1 and -ΔAcc vs Binary; usage  │
│    too high.                                        │
├─────────────────────────────────────────────────────┤
│ ┌─────────────────┐ ┌───────────────┐              │
│ │ Accuracy (Bin)  │ │ 3-Class (inf) │              │
│ │     88.3%       │ │    58.3%      │              │
│ │                 │ │   [MUTED]     │              │
│ └─────────────────┘ └───────────────┘              │
├─────────────────────────────────────────────────────┤
│ [Other dashboard content continues...]              │
└─────────────────────────────────────────────────────┘
```

## Component Specifications

### RangeGuard Chip (Header)
- **Status**: MUTED
- **Color**: Red (#DC2626)  
- **Background**: Light red (#FEF2F2)
- **Icon**: shield-x
- **Text**: "RangeGuard = MUTED"
- **Position**: Far right of header chips

### Warning Banner  
- **Background**: #FEF3C7 (amber-50)
- **Text**: #92400E (amber-800) 
- **Border**: #F59E0B (amber-500)
- **Icon**: exclamation-triangle
- **Content**: "Muted due to low F1 and -ΔAcc vs Binary; usage too high."

### Accuracy Tiles
- **Primary**: "Accuracy (Binary)" - 88.3% - Large, blue
- **Secondary**: "3-Class (informational)" - 58.3% - Small, gray, [MUTED] badge

## Responsive Behavior

### Desktop (>1200px)
- All components visible
- Full text in reason banner
- Both accuracy tiles shown

### Tablet (768-1200px)
- RangeGuard chip abbreviated to "Range:MUTED"
- Reason banner shortened to "Muted: low F1, -ΔAcc, high usage"
- Tiles stacked vertically

### Mobile (<768px)
- Only primary accuracy tile visible
- RangeGuard status in dropdown menu
- Banner becomes dismissible alert

## Data Binding

### Real-time Updates
```javascript
// Chip status
chip.status = readArtifact('RANGE_GUARD.md').status;

// Headline values  
primary.value = readArtifact('RANGE_AB_REPORT.md').binary_accuracy;
secondary.value = readArtifact('RANGE_AB_REPORT.md').class_accuracy;

// Reason line
banner.content = buildReasonFromDiagnostics();
```

### Artifact Sources
- **RANGE_GUARD.md**: Chip status and color
- **RANGE_AB_REPORT.md**: Accuracy values  
- **RANGE_DIAG.md**: Performance metrics for reason
- **RANGE_MUTE_DECISION.md**: Mute rationale

---
**DASHBOARD LAYOUT**: Muted range guard prominently displayed with clear reasoning
Generated by Dashboard Mute Viz v1.0
"""
        
        layout_file = self.audit_dir / 'DASHBOARD_LAYOUT_MUTED.md'
        with open(layout_file, 'w', encoding='utf-8') as f:
            f.write(layout_content)
        
        return str(layout_file)


def main():
    """Run Dashboard Mute Visualization"""
    viz = DashboardMuteViz()
    result = viz.mr2_dashboard_visibility()
    
    print("MR 2: Dashboard Mute Visibility")
    print(f"  Chip Config: Created")
    print(f"  Headline Config: Binary promoted to primary")
    print(f"  Reason Banner: 'Muted due to low F1 and -DeltaAcc vs Binary; usage too high.'")
    print(f"  Layout: Muted state optimized for visibility")
    
    return result


if __name__ == '__main__':
    main()